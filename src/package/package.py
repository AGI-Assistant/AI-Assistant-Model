"""
Module Name: package.py

Description:
    This module provides utility functions for packaging content.

Functions:
    - message(text_content, is_user, timestamp): This function wraps text
    into the application wide message formate.
    - content_text(full_text_content, partial_text_content, error_occurred):
    This function wraps text into the application wide content formate.
"""
from datetime import datetime


def message(text_content: str,
            is_user: bool = False,
            timestamp: datetime = datetime.now()
            ) -> dict:
    """
    This function wraps text into the application wide message formate.

    :param text_content: The content of the message.
    :type text_content: str
    :param is_user: Whether the message is from the user or the assistant.
    :type is_user: bool
    :param timestamp: Timestamp of the message, to be converted into a unix timestamp.
    :type timestamp: datetime
    :return: A dictionary of the application wide message format.
    :rtype: dict
    """
    return {'textContent': text_content, 'isUser': is_user,
            'timestamp': int(timestamp.timestamp())}


def content_text(full_text_content: str = None,
                 partial_text_content: str = None,
                 error_occurred: str = None
                 ) -> dict:
    """
    This function wraps text into the application wide content formate.

    :param full_text_content: The entire text generated by the model.
    :type full_text_content: str
    :param partial_text_content: The part which was generated until the error occurred.
    :type partial_text_content: str
    :param error_occurred: The error message.
    :type error_occurred: str
    :return: A dictionary of the application wide content format.
    :rtype: dict
    """
    return {key: value for key, value in {
        "content": full_text_content,
        "error": error_occurred,
        "partialContent": partial_text_content
    }.items() if value is not None}
